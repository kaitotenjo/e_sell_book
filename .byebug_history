exit
 params[:number_user]
params[number_user]
params
exit
ProductCategory.find_by(product: @product , category: 45).destroy
ProductCategory.find_by(product: @product , category: category).destroy
ProductCategory.destroy(product: @product , category: category)
ProductCategory.find_by(product: @product , category: category)
exit
a=2 if ProductCategory.find_by(product: @product , category:4).nil?
a=2 if ProductCategory.find_by(product: @product , category: category).nil?
a
 a=2 if ProductCategory.find_by(product: @product , category: 4)
a=1 if @index
a=1 if index
@index
@index =ProductCategory.find_by(product: @product , category: category)
a
 a=1 if ProductCategory.find_by(product: @product , category: category)
ProductCategory.find_by(product: @product , category: category).blank?
ProductCategory.find_by(product: @product , category: category).nil
ProductCategory.find_by(product: @product , category: category).class
ProductCategory.find_by(product: @product , category: category).any?
ProductCategory.find_by(product: @product , category: category).nil?
ProductCategory.find_by(product: @product , category: category)
Product.joins(:categories).joins(:product_categories).where(product_categories: {category_id: category.id})
ProductCategory.joins(@product).joins(category).where(product_categories: {category_id: category.id})
ProductCategory.join(@product).join(category).where(product_categories: {category_id: category.id})
exit
params
exit
params[category.id.to_s]
category.id
category
params[1]
params
params[:1]
params[1]
params
category.id
params[category.id]
params[category.id]==1
params[category.id]=="1"
exit
params
exit
params
exit
áº½it
params
exit
params
exit
array.include? x
array
x
array.includes(x)
array.class
exit
@product_categories
exit
@product_categories.category_id
@product_categories.category
@product_categories.categories
@product_categories= @product.product_categories
@product.product_categories
@product.product_categories.
@product.product_categories.categories.name
exit
@product_category
exit
@types
exit
@admins_order = Order.find(params[:id])
exit
exitr
@user
exit
params[:role]=0
exit
admins_user_params
exit
params
exit
params
exit
@admins_user.role=="admin"
@admins_user.role="admin"
exit
admins_product_params
exit
params
exit
params
exit
params
exit
params
exit
@user
@user.avatar.attached?
exit
params
exit
params
exit
params
exit
áº½it
exit
index
exit
index
exit
order.status="pending"
exit
order.status
exit
current_user
current_order
exit
@order.save
orderitems.collect { |orderitem| orderitem.valid? ? orderitem.product.price * orderitem.quantity : 0 }.sum
exit
@order
@orderitem
@order.save
@order.orderitems.find_by(product_id: @orderitem.product_id).nil?
@orderitem = @order.orderitems.new(order_params)
exit
orderitem.save
orderitem
orderitem = order.orderitems.new(order_id:order_id,product_id:order_id,quantity:1,until_price:15000,total:15000)
order.orderitems.new(order_id:order_id,product_id:order_id,quantity:1,until_price:15000,total:15000)
[A
order.save
order.orderitems.new(product_id:order_id,quantity:1,until_price:15000,total:15000)
order_id = n+1
order=Order.new
exit
Order.find_by(status: "pending",user_id:current_user.id)
current_order
@order.orderitems.new(order_params)
@order
exit
params
user
current_user
exit
current_user
exit
@product.destroy
exit
Product.joins(:product_categories).where(id: @product.id)
 ProductCategory.product(id: @product.id).destroy_all
ProductCategory.product(id: @product.id).destroy
exit
 ProductCategory.where(product_id: @product.id).destroy_all
a
a=ProductCategory.where(product_id: @product.id)
@product
exit
current_user.admin?
exit
áº½it
orders=Order.where(status: "pending",user_id:current_user.id)
exit
params
@user
exit
CURRENT_TIMESTAMP
timestamps
id
@user
exit
check_login.blank?
check_login.nil?
check_login
exit
params
exit
params
exit
params
@orderitem.quantity
exit
@order
params
params[:MM_YY]
params{:MM_YY]
params(:MM_YY)
@payments.update(:user_id => current_user.id, :order_id=> current_order.id)
@payment=User.payments.new(payment_params)
@payments.order
@payments.order.create(:user_id=>@user.id)
)
@payments.orders.create(user_id:@user.id)
@payments.order.create(user_id:@user.id)
@payments.join(:user).join(:order).save
@payments.save
@payments
@payments = Payment.new(payment_params)
params
exit
@payments
 @payments = Payment.new(payment_params)
params
exit
@payment = Payment.new(payment_params)
payment_params
params
exit
params[order_item.id.to_s]
order_item.id[:1]
order_item.id[1]
order_item.id
params[order_item.id]
order_item.update_attribute(:quantity,params[order_item.id])
exit
params
exit
orderitem.product.price
orderitem.order_id
orderitem.total
orderitem.quantity
orderitem.id
orderitem.until_price
orderitem.ubtil_price
orderitem.order_id
orderitem.id
orderitem.is
orderitem
orderitem.until_price
orderitem.untilprice
orderitem.until_price
orderitem
orderitem.until_price
exit
orderitems.collect { |orderitem| orderitem.valid? ? orderitem.product.price * orderitem.quantity : 0 }.sum
a.product.price
a.product
a=orderitems.first
orderitems.collect { |orderitem| orderitem.valid? ? orderitem.set_price.to_f * orderitem.quantity : 0 }.sum
orderitems
exit
orderitems.map{|orderitem| orderitem.valid? ? orderitem.until_price.to_f * orderitem.quantity : 0 }.sum
exit
o.quantity
o.quantity'
orderitems
o.until_price
o.until_price * o.quantity
exit
orderitems.collect { |orderitem| orderitem.valid? ? orderitem.until_price.to_f * orderitem.quantity : 0 }.sum
a.until_price
