exit
params
@user
exit
CURRENT_TIMESTAMP
timestamps
id
@user
exit
check_login.blank?
check_login.nil?
check_login
exit
params
exit
params
exit
params
@orderitem.quantity
exit
@order
params
params[:MM_YY]
params{:MM_YY]
params(:MM_YY)
@payments.update(:user_id => current_user.id, :order_id=> current_order.id)
@payment=User.payments.new(payment_params)
@payments.order
@payments.order.create(:user_id=>@user.id)
)
@payments.orders.create(user_id:@user.id)
@payments.order.create(user_id:@user.id)
@payments.join(:user).join(:order).save
@payments.save
@payments
@payments = Payment.new(payment_params)
params
exit
@payments
 @payments = Payment.new(payment_params)
params
exit
@payment = Payment.new(payment_params)
payment_params
params
exit
params[order_item.id.to_s]
order_item.id[:1]
order_item.id[1]
order_item.id
params[order_item.id]
order_item.update_attribute(:quantity,params[order_item.id])
exit
params
exit
orderitem.product.price
orderitem.order_id
orderitem.total
orderitem.quantity
orderitem.id
orderitem.until_price
orderitem.ubtil_price
orderitem.order_id
orderitem.id
orderitem.is
orderitem
orderitem.until_price
orderitem.untilprice
orderitem.until_price
orderitem
orderitem.until_price
exit
orderitems.collect { |orderitem| orderitem.valid? ? orderitem.product.price * orderitem.quantity : 0 }.sum
a.product.price
a.product
a=orderitems.first
orderitems.collect { |orderitem| orderitem.valid? ? orderitem.set_price.to_f * orderitem.quantity : 0 }.sum
orderitems
exit
orderitems.map{|orderitem| orderitem.valid? ? orderitem.until_price.to_f * orderitem.quantity : 0 }.sum
exit
o.quantity
o.quantity'
orderitems
o.until_price
o.until_price * o.quantity
exit
orderitems.collect { |orderitem| orderitem.valid? ? orderitem.until_price.to_f * orderitem.quantity : 0 }.sum
a.until_price
a=orderitems.first
orderitems.until_price
orderitems.until_price.first
orderitems.first.until_price
orderitems.first
orderitem.until_price
orderitems.collect { |orderitem| orderitem.valid? ? orderitem.until_price * orderitem.quantity : 0 }.sum
orderitems
orderitems.collect { |orderitem| orderitem.valid? ? orderitem.until_price.to_f * orderitem.quantity : 0 }.sum
exit
current_order
exit
current_order
current_order.orderitems
exit
@order.orderitems.product.find_by(id: @orderitem.product_id).nil?
exit
product_id
params
orderitems
orderitem
orderitem]
product.price
orderitem.product
orderitems
exit
orderitems
orderitems.product.price
orderitem.product.price
exit
@order.orderitems.find_by(product_id: @orderitem.product_id).nil?
exit
params
exit
params
exit
@order
exit
current_user.nil?
current_user.blank?
current_user
exit
authenticate_user
authenticate_user!
exit
params[:q] == 0
params
exit
Product.joins(:categories).joins(:product_categories).where(product_categories: {category_id: params[:search]})
 @products
params[:q]
exit
params
exit
exit)
params[:q].nil?
params[:q]
exit
category.id
category_id
categoy.id
categoy_id
category
exit
Product.ransack().result
Product.ransack(category_id_matches: "1").result
Product.ransack(params[:q]).result
Product.ransack(params[:q])
params[:q]
exit
Product.ransack(category_id_eq: "1").result
Product.joins(:ProductCategory).where(category_id: 1)
Product.joins(:Productcategory).where(category_id: 1)
Product.joins(:productcategory).where(category_id: 1)
Product.joins(:product_category).where(category_id: 1)
params[:q]
ProductCategory.where(category_id:1)
ProductCategory.products.where(category_id:1)
ProductCategory.product.where(category_id:1)
Product.product_categories
Product.product_categories.where(category_id: 1)
Product.product_categories.where(category_id : 1)
Product.product_categories.where(category_id : 1
params
exit
@products.length
@products
@product
exit
ProductCategory.create(product: product , category: category)
category
product
